class Notify{constructor(options){this.options={title:"",onclick:null,onclose:null,onshow:null,onerror:null,showInit:false,autoClose:true,autoCloseTime:3,};this.instance=null;this.#mergeOptions(options);if(this.options.showInit){this.show(this.options)}}async show(options={}){const _this=this;try{this.#mergeOptions(options);const{title,onclick,onclose,onshow,onerror,autoClose,autoCloseTime}=this.options;if(!title){console.warn("提示：标题未设置");return null}const{ok,msg}=await this.#checkPermission();if(!ok){console.warn("提示：",msg);return}const notice=new Notification(title,this.options);notice.onshow=function(){if(autoClose){setTimeout(()=>{_this.close()},autoCloseTime*1000)}_this.#checkIsFunctionAndHandle(onshow)};notice.onclick=function(){_this.#checkIsFunctionAndHandle(onclick)};notice.onclose=function(){_this.#checkIsFunctionAndHandle(onclose)};notice.onerror=function(){_this.#checkIsFunctionAndHandle(onerror)};this.instance=notice;return this.instance}catch(error){console.error("日志：",error);return null}}close(){this.instance&&this.instance.close()}#checkIsFunctionAndHandle(fn,callbackData){typeof fn==='function'&&fn({callbackData:callbackData,options:this.options})}#checkPermission(){return new Promise((resolve)=>{if(!("Notification"in window)){resolve({ok:false,msg:"当前浏览器不支持桌面通知"})}else if(Notification.permission==="granted"){resolve({ok:true,msg:"已经授权"})}else if(Notification.permission!=="denied"){Notification.requestPermission().then((permission)=>{if(permission==="granted"){resolve({ok:true,msg:"授权完成"})}else{resolve({ok:false,msg:"取消授权"})}})}else{Notification.requestPermission().then((permission)=>{if(permission==="granted"){resolve({ok:true,msg:"授权完成"})}else{resolve({ok:false,msg:"取消授权"})}})}})}#mergeOptions(newOptions){this.options=Object.assign({},this.options,newOptions);return this.options}}